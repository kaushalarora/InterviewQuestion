*******************************************************************************************************Capgemini interview*******************************************************************************************************

write a program to reverse this string 
WRP to sum this number - 1234
check the palindrome of - MOM 
write a full entity class
@Entity
Public Class Student{
	@Id
	@GeneratedValue(stratergy=GenerationType.AUTO)
	Private int id;
	Private String name;
	Private int age;
	Private int rollNo;
 
	Public Student(){};	
	Public void setName();
}
what is @transactional annotation in spring boot
difference between spring boot and microservices
what is autowired annotation in spring?
what is a spring container in a spring boot?
what is spring configuration in spring boot
Bean life cycle in Java Spring
what is hashcode
what is treeset
method overloading and overriding
difference between coupling and cohesion
what are enums
what is serialversionuid and how to generate it

*******************************************************************************************************Infosys Interview*******************************************************************************************************
employee_id	first_name	last_name	dept_id	manager_id	salary	expertise
100	John	White	IT	103	120000	Senior
101	Mary	Danner	Account	109	80000	junior
102	Ann	Lynn	Sales	107	140000	Semisenior
103	Peter	O'connor	IT	110	130000	Senior
106	Sue	Sanchez	Sales	107	110000	Junior
107	Marta	Doe	Sales	110	180000	Senior

Fetch the first 5 records.
select * from emp order by employee limit 5;
select * from emp where salary > 12000; and expertise = 'senior';
select max(salary) from employee where salary not in (select max(salary) from employee);
select * from emp where salary = (select max(salary) from employee);
What is the output of the below code?
public class Customer {
	String name;
	int age;
	
	Customer(String name,int age)
	{'
		this.name=name;
		this.age=age;
	}
	
	public static void main(String[] args) {
	Customer c1= new Customer("John",20);
	Customer c2= new Customer("John",20);
	
	HashSet<Customer> customerSet=new HashSet<>();
	customerSet.add(c1);
	customerSet.add(c2);
	
	System.out.println(customerSet.size());
	}
	// getters and setters
}
Sort customers on the basis of params in Java 7/8
class Emp implements Comparable{
int age;
String name;

Emp compareTo (Object o)
	return this.getAge() > o.getAge();
}

public static void main(String arg[]){
}
list.stream().filter( emp -> emp.getAge).collect(Collectors.toList);

*******************************************************************************************************TCS Interview*******************************************************************************************************
second highest salary 
select Max(salary) from tableName where salary < (select Max(salary) from tablName);
agile methodology steps
can we have static variables and methods in the abstract class
can we use the static method in Java
what will happen if we remove the static keyword from the main method?



*****************************************************************Core java question*******************************************************************************************************
can we call a static method from a non-static method - yes, but we can not call a non-static method from the static method without creating an instance.
can we inherit static method in Java - yes, overload method only, override leads to method hiding
Why can’t we override static methods in Java? - This is because static methods are not associated with the instance of a class, but with the class itself
What happens if I declare a static method in a subclass with the same signature as in the superclass? - the method in the subclass hides the one 
in the superclass.
Can I use the @Override annotation for static methods in Java? -- No
How should I access a static method defined in a superclass from a subclass - both methods are always accessible directly 
via their respective class names
marker interface.
How does method invocation differ between static and instance methods in Java? - Static methods can be called without the object of the class. 
Instance methods require an object of the class.
Coupling, Cohesion, Association, Aggregation, Composition
Difference between abstract class and interface
types of inheritance in Java
prototype, singleton scope of bean in spring
Stream supports many aggregate operations like filter, map, limit, reduce, find, and match to customize the 
original data into a different form according to the needs of the programmer.
Who developed Java in which year? - Java was created at Sun Microsystems, Inc., where James Gosling - 1991 - (acquired by Oracle)
What is Class and objects?
OOPs concepts.
what is waiting to notify and notify all, yield and join difference in Java
what is final, and finally, finalize
method available in the object class.
marker interface in Java - no methods or constants inside it - Serializable, Cloneable, and Remote interface
functional interface in Java - Consumer, Supplier, Function, and Predicate 
access specifiers of method and class.
Synchronized keyword.
why thread method in the object class, thread methods, and their specifaction.
thread life cycle in Java
how many ways we can create thread. how many times can we call start on a single object? - single time
Why we use String, StringBuffer, StringBuilder - in which memory string will be stored in jvm.
Naming Conventions of the class.
can we use synchronized, static under method? - yes
Design pattern - creational(singleton, factory), behavioral, structural.
How to maintain thread concurrency in java
what is object-level lock in Java
How to avoid something from serialization. - The transient keyword in Java
why we need serialization in Java - In Java, we create several objects that live and die accordingly, and every object will certainly die when the JVM dies. ... Well, serialization allows us to convert the state of an object into a byte stream, which then can be saved into a file on the local disk or sent over the network to any other machine
can we change the return type in method overriding in java - Yes. Overridden methods can have different return type.
method overloading in child class java - Usually, method overloading happens inside a single class, Overloading can happen in same class as well as parent-child class relationship whereas overriding happens only in an inheritance relationship
How can we assign values to abstract class variables?
how can we make the ArrayList thread-safe - Use Collections.synchronizedList().
In Java we use object by value or reference - call by value only(This will work only for primitive type (because primitive types are passed by value))
throws vs throw.
why do we use primitive type if we have a wrapper in Java.
what is checked and unchecked exception in Java.
ArrayList vs LinkedList java
hashmap internal working
what are the java 7 features - Binary Literals, Strings in switch Statements, The try-with-resources Statement.
what are the Java 8 features - Lambda expressions ( It helps to iterate, filter, and extract data from the collection.), Method references, Functional interfaces, Stream API, Optional class, Collectors class, ForEach() method
why Lambda expressions - To provide the implementation to Functional interface, Less coding.
null is an object or string in Java - The Java programming language distinguishes between null and empty strings. An empty string is a string instance of zero length, whereas a null string has no value at all. An empty string is represented as "" . It is a character sequence of zero characters.
autoboxing and unboxing in Java
call by value or reference
why stack memory is required in Java - used for static memory allocation and the execution of a thread
can two objects have same hashcode - It is perfectly legal for two objects to have the same hashcode. If two objects are equal (using the equals() method) then they have the same hashcode.
what is a native keyword in java?
solid principles java?

Java 8 questions - 
Java 8 features - lambda, stream, functional interface.
Streams - sequential stream, parallel stream.
Optional class in Java 8 - Java 8 has introduced a new class Optional in Java. util package. It can help in writing neat code without using too many null checks. By using Optional, we can specify alternate values to return or alternate code to run
Callable interface

what is dependency injection
what is cascading - Entity relationships often depend on the existence of another entity, for example the Person–Address relationship. Without the Person, the Address entity doesn't have any meaning of its own. When we delete the Person entity, our Address entity should also get deleted.
Cascading is the way to achieve this. When we perform some action on the target entity, the same action will be applied to the associated entity.
what is ORM
what is callable
what is eager loading and lazy loading
@ControllerAdvice is a specialized form of the spring's stereotype annotation which allows handling exceptions across the whole application in one global handling component.
Aspect-oriented programming isolates the concerns of your application, reduces code clutter, and improves the maintainability and readability of your code.
what is eager and lazy loading in hibernate - 
SOLID principle

what is functional programming, and why do we use this in Java 8
what is the feature added in hashmap java 8
how equals and hashcode method will work
what is the return type of the run method? - void
why the sleep method in thread class is static - 
why thread methods in object class
java 8 features {
	forEach() method in the Iterable interface.
	default and static methods in Interfaces.
	Functional Interfaces and Lambda Expressions.
	Java Stream API for Bulk Data Operations on Collections.
	Java Time API.
	Collection API improvements.
	Concurrency API improvements.
	Java IO improvements.
}

Springboot question - 
what is ioc in spring
what is dependency injection?
What is @SptringbootApplication, @autowried, @repository, @service, @component
@Controller vs @RestController
@Component vs @bean
@controlleradvice
@circuitbreaker
How we can run Springboot jar via CLI - java -jar jar name
The @ControllerAdvice is an annotation, to handle the exceptions globally.
The @ExceptionHandler is an annotation used to handle the specific exceptions and send the custom responses to the client.


Database question - 
JpaRepository extends PagingAndSortingRepository which in turn extends CrudRepository
